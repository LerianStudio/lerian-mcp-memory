---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating Main Tasks from PRD and TRD Analysis

## Goal

To guide an AI assistant in analyzing both Product Requirements Document (PRD) and Technical Requirements Document (TRD) to generate atomic, functional main tasks (phases) that serve as the foundation for project implementation. Each main task must deliver a complete, working, and testable application increment.

## Process

1. **Read Both Documents:** The AI must first read both the PRD and TRD documents for comprehensive understanding (tipically at `/docs/pre-development/`)
2. **Analyze Development Roadmap:** Extract and understand the phases outlined in both PRD and TRD
3. **Apply Atomic Principles:** Ensure each main task is self-contained and delivers working functionality
4. **Generate Main Tasks:** Create detailed main task specifications using the structure below
5. **Save Output:** Save as `main-tasks-[feature-name].md` in `/docs/pre-development/tasks/` directory

## Input Documents Analysis

### PRD Analysis Requirements
- **Development Roadmap (Section 13):** Extract the high-level phases and their scope
- **Logical Dependency Chain (Section 14):** Understand the foundation-first approach
- **Functional Requirements (Section 5):** Map requirements to deliverable phases
- **User Stories (Section 3):** Identify user value delivery points
- **Success Metrics (Section 9):** Define measurable outcomes for each phase

### TRD Analysis Requirements
- **Implementation Roadmap (Section 16):** Extract technical phases and dependencies
- **Component Design (Section 6):** Understand technical component breakdown
- **Technology Stack (Section 3):** Identify technical deliverables
- **Testing Strategy (Section 12):** Ensure each phase includes testing
- **Deployment Architecture (Section 13):** Define deployment milestones

## Atomic Phase Principles

### Definition of "Atomic"
Each main task MUST be:
- **Self-Contained:** Can be developed, tested, and deployed independently
- **Functional:** Delivers working software that users can interact with
- **Testable:** Has clear acceptance criteria and can be validated
- **Deployable:** Results in a runnable application (even if limited scope)
- **Valuable:** Provides measurable user or business value

### Phase Validation Checklist
Before finalizing each main task, ensure:
- [ ] **Independent Deployment:** Can be deployed without dependencies on future phases
- [ ] **User Interaction:** Users can perform meaningful actions with this phase alone
- [ ] **Complete Feature Set:** All components needed for the phase are included
- [ ] **Quality Standards:** Testing, monitoring, and observability are included
- [ ] **Rollback Capability:** Can be safely rolled back if issues arise

## Main Task Structure

Each generated main task should include these sections (strictly follow this structure):

### 1. Task Overview
- **Task ID:** MT-[number] (e.g., MT-001, MT-002)
- **Task Name:** Clear, descriptive name (e.g., "CLI Foundation with Local Storage")
- **Phase Type:** Foundation, Core Feature, Enhancement, Integration, Production
- **Duration Estimate:** Rough timeline (e.g., "4-6 weeks")
- **Atomic Validation:** Confirm this delivers a working application

### 2. Deliverable Description
- **Primary Deliverable:** What working software will be delivered
- **User Value:** How users benefit from this phase
- **Business Value:** What business objective this achieves
- **Working Definition:** Exact criteria for "working application"

### 3. Functional Scope
- **Included Features:** Specific features implemented in this phase
- **User Capabilities:** What users can accomplish with this phase
- **API Endpoints:** Which endpoints are functional (if applicable)
- **UI Components:** Which interface elements are working (if applicable)

### 4. Technical Scope
- **Architecture Components:** Which technical components are built
- **Data Model:** What data structures are implemented
- **Integration Points:** Which integrations are functional
- **Infrastructure:** What deployment infrastructure is required

### 5. Dependencies
- **Required Previous Phases:** Which main tasks must be completed first
- **External Dependencies:** Third-party services, libraries, or tools needed
- **Internal Dependencies:** Existing system components required
- **Blocking Dependencies:** What could prevent this phase from starting

### 6. Acceptance Criteria
- **Functional Criteria:** Numbered list of functional requirements
- **Technical Criteria:** Numbered list of technical requirements
- **Quality Criteria:** Performance, security, and reliability standards
- **User Acceptance:** How users will validate the deliverable

### 7. Testing Requirements
- **Unit Testing:** Required unit test coverage and scope
- **Integration Testing:** Integration points that must be tested
- **End-to-End Testing:** Complete user workflows to validate
- **Performance Testing:** Load and performance validation requirements

### 8. Deployment Definition
- **Deployment Target:** Where this phase will be deployed
- **Configuration:** Required environment configuration
- **Data Migration:** Any data migration requirements
- **Rollback Plan:** How to safely revert this deployment

### 9. Success Metrics
- **Technical Metrics:** Performance, uptime, error rates
- **User Metrics:** Usage, adoption, satisfaction indicators
- **Business Metrics:** Revenue, efficiency, cost impact
- **Quality Metrics:** Code coverage, bug rates, security compliance

### 10. Risk Assessment
- **Technical Risks:** Implementation challenges and mitigations
- **Integration Risks:** Potential integration issues
- **Timeline Risks:** Factors that could affect delivery
- **Quality Risks:** Potential quality or performance issues

## Example Main Task Format

```markdown
## MT-001: CLI Foundation with Local Storage

### 1. Task Overview
- **Task ID:** MT-001
- **Task Name:** CLI Foundation with Local Storage
- **Phase Type:** Foundation
- **Duration Estimate:** 4-6 weeks
- **Atomic Validation:** ✅ Delivers a working CLI that can manage tasks locally

### 2. Deliverable Description
- **Primary Deliverable:** Functional CLI application that manages tasks with local file storage
- **User Value:** Developers can create, list, update, and complete tasks locally
- **Business Value:** Provides immediate task management capability without server dependency
- **Working Definition:** CLI responds to all basic commands and persists data locally

### 3. Functional Scope
- **Included Features:**
  - Task creation (`lmmc add "task description"`)
  - Task listing (`lmmc list`)
  - Task status updates (`lmmc start`, `lmmc done`)
  - Local configuration management
  - Shell completion installation
- **User Capabilities:**
  - Create new tasks with descriptions
  - View all tasks with status filtering
  - Mark tasks as started or completed
  - Configure CLI settings
- **API Endpoints:** N/A (local-only phase)
- **UI Components:** Terminal CLI interface with colored output

[Continue with remaining sections...]
```

## Quality Standards

### Completeness Validation
Each main task must include:
- [ ] **Clear Success Definition:** Unambiguous criteria for completion
- [ ] **User Workflow:** Complete user journey from start to finish
- [ ] **Technical Architecture:** All required components identified
- [ ] **Testing Strategy:** Comprehensive testing plan
- [ ] **Deployment Plan:** Clear deployment and validation process

### Atomic Validation
Verify each main task:
- [ ] **Standalone Value:** Provides value without future phases
- [ ] **Complete Feature Set:** All components needed are included
- [ ] **Working Software:** Results in functional, testable application
- [ ] **User-Facing:** Users can interact with and benefit from the deliverable
- [ ] **Production-Ready:** Includes monitoring, logging, and observability

## Output Structure

### File Organization
```
docs/pre-development/tasks/
├── main-tasks-[feature-name].md     # This document
├── phase-dependencies.md            # Dependency visualization
└── acceptance-checklist.md          # Validation checklist
```

### Dependencies Visualization
Include a mermaid diagram showing phase dependencies:
```mermaid
graph TD
    A[MT-001: CLI Foundation] --> B[MT-002: AI Integration]
    B --> C[MT-003: Server Integration]
    C --> D[MT-004: Advanced Features]
    D --> E[MT-005: Production Deployment]
```

## Integration with Development Chain

### Input Sources
- **PRD Section 13:** Development Roadmap phases
- **PRD Section 14:** Logical Dependency Chain
- **TRD Section 16:** Implementation Roadmap
- **User Stories:** Value delivery validation

### Output Usage
- **generate-sub-tasks.mdc:** Uses main tasks to create detailed sub-tasks
- **Project Planning:** Provides sprint/milestone boundaries
- **Team Coordination:** Defines handoff points between teams
- **Stakeholder Communication:** Shows delivery milestones

## Validation Checklist

Before finalizing main tasks:
- [ ] **PRD Alignment:** All PRD phases represented in main tasks
- [ ] **TRD Alignment:** Technical roadmap matches main task structure
- [ ] **Atomic Principle:** Each task delivers working software
- [ ] **Dependency Logic:** Dependencies are logical and minimal
- [ ] **User Value:** Each phase provides measurable user benefit
- [ ] **Technical Completeness:** All required components included
- [ ] **Testing Coverage:** Comprehensive testing strategy defined
- [ ] **Deployment Readiness:** Clear deployment and validation plan

## Final Instructions

1. **Read Both Documents:** Always analyze both PRD and TRD thoroughly
2. **Apply Atomic Thinking:** Each main task must be a complete, working increment
3. **Validate Dependencies:** Ensure dependencies are necessary and minimal
4. **Define Success Clearly:** Each task must have unambiguous completion criteria
5. **Include Quality Measures:** Testing, monitoring, and observability in every phase
6. **Plan for Users:** Each phase should provide tangible user value
7. **Next Step:** After completing main tasks, use `@generate-sub-tasks.mdc` for detailed breakdown

## Relationship to Chain

This rule is the third step in the development chain:
1. **create-prd.mdc** → Defines business requirements and high-level phases
2. **create-trd.mdc** → Translates to technical specifications and implementation roadmap
3. **generate-main-tasks.mdc** → Creates atomic, functional development phases ← **YOU ARE HERE**
4. **generate-sub-tasks.mdc** → Breaks down each main task into implementable sub-tasks