# Claude Memory MCP Server - Complete Configuration
# Copy this file to .env and update the values as needed

# ================================================================
# REQUIRED CONFIGURATION
# ================================================================

# OpenAI Configuration (Required)
OPENAI_API_KEY=your_openai_api_key_here                   # Your OpenAI API key (get from https://platform.openai.com/api-keys)
OPENAI_EMBEDDING_MODEL=text-embedding-ada-002             # OpenAI embedding model for vector generation
MCP_MEMORY_OPENAI_MAX_TOKENS=8191                         # Maximum tokens per API request (ada-002 limit: 8191)
MCP_MEMORY_OPENAI_TEMPERATURE=0.0                         # Temperature for API calls (0.0 = deterministic, 1.0 = creative)
MCP_MEMORY_OPENAI_REQUEST_TIMEOUT_SECONDS=60              # Timeout for OpenAI API requests in seconds
MCP_MEMORY_OPENAI_RATE_LIMIT_RPM=60                       # Rate limit: requests per minute to OpenAI API
MCP_MEMORY_OPENAI_DEFAULT_RPM=60                          # Fallback RPM if rate limit config fails

# ================================================================
# SERVER CONFIGURATION
# ================================================================

# Server Basic Settings
MCP_MEMORY_PORT=9080                                      # Port for MCP server (HTTP mode)
MCP_MEMORY_HOST=localhost                                 # Host address to bind server to
MCP_MEMORY_DEFAULT_HTTP_ADDR=:9080                       # Default HTTP address format (with colon)
MCP_MEMORY_READ_TIMEOUT_SECONDS=30                       # HTTP read timeout for incoming requests
MCP_MEMORY_WRITE_TIMEOUT_SECONDS=30                      # HTTP write timeout for outgoing responses

# ================================================================
# CHROMA VECTOR DATABASE CONFIGURATION
# ================================================================

# Chroma Connection Settings
MCP_MEMORY_CHROMA_ENDPOINT=http://localhost:9000          # Chroma database endpoint URL
MCP_MEMORY_CHROMA_COLLECTION=claude_memory                # Collection name for storing memory chunks
MCP_MEMORY_CHROMA_TENANT=default_tenant                   # Chroma tenant (namespace for multi-tenancy)
MCP_MEMORY_CHROMA_DATABASE=default_database               # Chroma database within tenant

# Chroma Health & Reliability
MCP_MEMORY_CHROMA_HEALTH_CHECK=true                       # Enable health checks for Chroma connection
MCP_MEMORY_CHROMA_RETRY_ATTEMPTS=3                        # Number of retry attempts for failed requests
MCP_MEMORY_CHROMA_TIMEOUT_SECONDS=30                      # Timeout for Chroma API operations
MCP_MEMORY_CHROMA_RETRY_WAIT_SECONDS=1                    # Initial wait time between retries
MCP_MEMORY_CHROMA_RETRY_MAX_WAIT_SECONDS=5                # Maximum wait time between retries (exponential backoff)

# Chroma Docker Configuration
MCP_MEMORY_CHROMA_DOCKER_ENABLED=true                     # Enable Docker-based Chroma deployment
CHROMA_CONTAINER_NAME=claude-memory-chroma                # Docker container name for Chroma
CHROMA_VOLUME_PATH=./data/chroma                          # Local path for Chroma data persistence
MCP_MEMORY_CHROMA_IMAGE=chromadb/chroma:latest           # Docker image for Chroma database

# ================================================================
# STORAGE CONFIGURATION
# ================================================================

# Storage Provider & Retention
MCP_MEMORY_STORAGE_PROVIDER=chroma                        # Vector storage provider (currently only 'chroma' supported)
RETENTION_DAYS=90                                         # Days to keep memory chunks before cleanup

# Backup Settings
MCP_MEMORY_BACKUP_ENABLED=false                          # Enable automatic backups of memory data
MCP_MEMORY_BACKUP_INTERVAL_HOURS=24                      # Hours between automatic backups

# Cache Configuration
MCP_MEMORY_CACHE_MAX_SIZE=1000                           # Maximum number of items in embedding cache
MCP_MEMORY_CACHE_CLEANUP_BATCH=100                       # Number of items to remove during cache cleanup

# ================================================================
# INTELLIGENT CHUNKING CONFIGURATION
# ================================================================

# Chunking Strategy
MCP_MEMORY_CHUNKING_STRATEGY=smart                        # Chunking algorithm: 'smart' (context-aware) or 'simple' (size-based)
MCP_MEMORY_CHUNKING_MIN_LENGTH=50                         # Minimum characters required to create a chunk
MCP_MEMORY_CHUNKING_MAX_LENGTH=10000                      # Maximum characters per chunk (for embedding limits)
MCP_MEMORY_CHUNKING_SIMILARITY_THRESHOLD=0.8             # Similarity threshold for merging related content (0.0-1.0)

# Chunking Triggers
MCP_MEMORY_CHUNKING_TODO_TRIGGER=true                     # Create chunks when todos are completed
MCP_MEMORY_CHUNKING_FILE_THRESHOLD=3                      # Number of file changes to trigger chunking
MCP_MEMORY_CHUNKING_TIME_THRESHOLD_MINUTES=10             # Minutes of inactivity to trigger chunking

# ================================================================
# LOGGING CONFIGURATION
# ================================================================

# Basic Logging
LOG_LEVEL=info                                            # Log level: debug, info, warn, error
LOG_FORMAT=json                                           # Log format: json (structured) or text (human-readable)
LOG_FILE=                                                 # Log file path (empty = stdout only)

# Log Rotation
MCP_MEMORY_LOG_MAX_SIZE_MB=10                            # Maximum log file size before rotation (MB)
MCP_MEMORY_LOG_MAX_BACKUPS=3                             # Number of rotated log files to keep
MCP_MEMORY_LOG_MAX_AGE_DAYS=30                           # Days to keep rotated log files

# ================================================================
# HEALTH CHECK CONFIGURATION
# ================================================================

# Health Check Timeouts
MCP_MEMORY_HEALTH_CHECK_TIMEOUT_SECONDS=30               # Overall health check timeout
MCP_MEMORY_READINESS_TIMEOUT_SECONDS=10                  # Readiness probe timeout
MCP_MEMORY_DB_CHECK_TIMEOUT_SECONDS=5                    # Database connectivity check timeout
MCP_MEMORY_VECTOR_CHECK_TIMEOUT_SECONDS=10               # Vector database check timeout

# Performance Thresholds
MCP_MEMORY_DB_SLOW_THRESHOLD_SECONDS=1                   # Database response time considered "slow"
MCP_MEMORY_VECTOR_SLOW_THRESHOLD_SECONDS=2               # Vector DB response time considered "slow"

# ================================================================
# DOCKER COMPOSE PORT CONFIGURATION
# ================================================================

# Host Ports for Services
CHROMA_HOST_PORT=9000                                     # Host port mapping for Chroma service
MCP_HOST_PORT=9080                                        # Host port mapping for MCP server
MCP_HEALTH_PORT=9081                                      # Host port for health check endpoint
MCP_METRICS_PORT=9082                                     # Host port for metrics endpoint (Prometheus)

# Health Check Intervals (Docker Compose)
HEALTH_CHECK_INTERVAL=30s                                 # How often to run health checks
HEALTH_CHECK_TIMEOUT=10s                                  # Timeout for each health check
HEALTH_CHECK_RETRIES=3                                    # Consecutive failures before marking unhealthy
HEALTH_CHECK_START_PERIOD=10s                            # Grace period before starting health checks

# ================================================================
# PERFORMANCE TUNING
# ================================================================

# Rate Limiting
MCP_MEMORY_RATE_LIMITER_WAIT_MS=100                      # Milliseconds to wait when rate limited

# ================================================================
# DEVELOPMENT & DEBUGGING
# ================================================================

# Development Mode Settings (uncomment for dev)
# LOG_LEVEL=debug                                         # Enable debug logging for development
# MCP_MEMORY_CHROMA_HEALTH_CHECK=false                   # Disable health checks for faster local testing
# MCP_MEMORY_BACKUP_ENABLED=false                        # Disable backups during development