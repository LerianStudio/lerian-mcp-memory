# Production Makefile for MCP Memory Server
# This Makefile provides production-specific targets for deployment and management

.PHONY: help prod-setup prod-deploy prod-start prod-stop prod-restart prod-logs prod-backup prod-restore prod-health prod-clean

# Default target
help: ## Show this help message
	@echo "Production Deployment Commands for MCP Memory Server"
	@echo "===================================================="
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "Examples:"
	@echo "  make prod-setup           # Initial production setup"
	@echo "  make prod-deploy          # Deploy to production"
	@echo "  make prod-health          # Check system health"
	@echo "  make prod-backup          # Create backup"

# Production environment variables
include .env.production

# Variables
COMPOSE_FILES := -f docker-compose.production.yml
MONITORING_FILES := -f docker-compose.monitoring.yml
PROJECT_NAME := lerian-mcp-memory
BACKUP_DIR := ./backups
DATA_DIR := ./data
LOG_DIR := ./logs

# =============================================================================
# SETUP AND INITIALIZATION
# =============================================================================

prod-setup: ## Initial production environment setup
	@echo "Setting up production environment..."
	@chmod +x scripts/*.sh
	@mkdir -p $(DATA_DIR) $(LOG_DIR) $(BACKUP_DIR)
	@mkdir -p $(DATA_DIR)/{postgres,qdrant,redis,mcp-memory,prometheus,grafana,alertmanager,loki}
	@mkdir -p ssl logs/nginx
	@cp .env.production.example .env.production || true
	@echo "‚úÖ Production environment setup completed"
	@echo "‚ö†Ô∏è  Please edit .env.production with your actual configuration values"

prod-env-check: ## Check production environment configuration
	@echo "Checking production environment..."
	@test -f .env.production || (echo "‚ùå .env.production not found. Run 'make prod-setup' first" && exit 1)
	@echo "‚úÖ Environment file exists"
	@scripts/health_check.sh --quiet || echo "‚ö†Ô∏è  Some health checks failed"

# =============================================================================
# DEPLOYMENT
# =============================================================================

prod-deploy: prod-env-check ## Deploy complete production stack
	@echo "Deploying production stack..."
	@scripts/deploy.sh deploy -b -m -v
	@echo "‚úÖ Production deployment completed"

prod-deploy-app: prod-env-check ## Deploy application only (no monitoring)
	@echo "Deploying application stack..."
	@scripts/deploy.sh deploy -b
	@echo "‚úÖ Application deployment completed"

prod-update: ## Update application with zero-downtime
	@echo "Updating production application..."
	@scripts/deploy.sh update
	@echo "‚úÖ Production update completed"

prod-rollback: ## Rollback to previous version
	@echo "Rolling back production deployment..."
	@scripts/deploy.sh rollback
	@echo "‚úÖ Rollback completed"

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================

prod-start: ## Start all production services
	@echo "Starting production services..."
	@docker-compose $(COMPOSE_FILES) up -d
	@docker-compose $(MONITORING_FILES) up -d
	@echo "‚úÖ Production services started"

prod-stop: ## Stop all production services
	@echo "Stopping production services..."
	@docker-compose $(MONITORING_FILES) down
	@docker-compose $(COMPOSE_FILES) down
	@echo "‚úÖ Production services stopped"

prod-restart: ## Restart all production services
	@echo "Restarting production services..."
	@make prod-stop
	@sleep 5
	@make prod-start
	@echo "‚úÖ Production services restarted"

prod-restart-app: ## Restart application services only
	@echo "Restarting application services..."
	@docker-compose $(COMPOSE_FILES) restart mcp-memory-server
	@echo "‚úÖ Application services restarted"

# =============================================================================
# MONITORING AND HEALTH
# =============================================================================

prod-status: ## Show production deployment status
	@echo "Production Status:"
	@echo "=================="
	@scripts/deploy.sh status

prod-health: ## Run comprehensive health check
	@echo "Running production health check..."
	@scripts/health_check.sh check

prod-health-json: ## Health check in JSON format
	@scripts/health_check.sh check -f json

prod-health-continuous: ## Continuous health monitoring
	@echo "Starting continuous health monitoring..."
	@scripts/health_check.sh continuous

# =============================================================================
# LOGGING AND DEBUGGING
# =============================================================================

prod-logs: ## Show logs for all services
	@docker-compose $(COMPOSE_FILES) logs -f

prod-logs-app: ## Show application logs only
	@docker-compose $(COMPOSE_FILES) logs -f mcp-memory-server

prod-logs-db: ## Show database logs
	@docker-compose $(COMPOSE_FILES) logs -f postgres

prod-logs-nginx: ## Show nginx logs
	@docker-compose $(COMPOSE_FILES) logs -f nginx
	@tail -f logs/nginx/access.log logs/nginx/error.log

# =============================================================================
# BACKUP AND RECOVERY
# =============================================================================

prod-backup: ## Create full production backup
	@echo "Creating production backup..."
	@scripts/backup.sh create -t full -c -v
	@echo "‚úÖ Backup completed"

prod-backup-db: ## Create database-only backup
	@echo "Creating database backup..."
	@scripts/backup.sh create -t database -c
	@echo "‚úÖ Database backup completed"

prod-backup-s3: ## Create backup and upload to S3
	@echo "Creating backup and uploading to S3..."
	@scripts/backup.sh create -t full -c -v -d s3 --s3-bucket $(BACKUP_S3_BUCKET)
	@echo "‚úÖ S3 backup completed"

prod-restore: ## Restore from backup (requires BACKUP_FILE)
	@test -n "$(BACKUP_FILE)" || (echo "‚ùå BACKUP_FILE not specified. Use: make prod-restore BACKUP_FILE=backup_name" && exit 1)
	@echo "Restoring from backup: $(BACKUP_FILE)"
	@scripts/backup.sh restore -f $(BACKUP_FILE)
	@echo "‚úÖ Restore completed"

prod-list-backups: ## List available backups
	@scripts/backup.sh list

# =============================================================================
# MAINTENANCE
# =============================================================================

prod-cleanup: ## Clean up old images and backups
	@echo "Cleaning up production environment..."
	@scripts/deploy.sh cleanup
	@scripts/backup.sh cleanup -r 30
	@docker system prune -f
	@echo "‚úÖ Cleanup completed"

prod-update-images: ## Pull latest Docker images
	@echo "Pulling latest Docker images..."
	@docker-compose $(COMPOSE_FILES) pull
	@docker-compose $(MONITORING_FILES) pull
	@echo "‚úÖ Images updated"

prod-vacuum-db: ## Run database maintenance
	@echo "Running database maintenance..."
	@docker-compose $(COMPOSE_FILES) exec postgres psql -U $(POSTGRES_USER) -d $(POSTGRES_DB) -c "VACUUM ANALYZE;"
	@echo "‚úÖ Database maintenance completed"

# =============================================================================
# SECURITY
# =============================================================================

prod-security-scan: ## Run security scan on containers
	@echo "Running security scan..."
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		clair/clair:latest clair-scanner --ip $$(hostname -I | awk '{print $$1}') \
		$(PROJECT_NAME)_mcp-memory-server_1 || true
	@echo "‚úÖ Security scan completed"

prod-ssl-check: ## Check SSL certificate status
	@echo "Checking SSL certificates..."
	@test -f ssl/server.crt && openssl x509 -in ssl/server.crt -text -noout | grep "Not After" || echo "‚ö†Ô∏è  SSL certificate not found or invalid"

# =============================================================================
# MONITORING STACK
# =============================================================================

prod-monitoring-start: ## Start monitoring stack only
	@echo "Starting monitoring stack..."
	@docker-compose $(MONITORING_FILES) up -d
	@echo "‚úÖ Monitoring stack started"
	@echo "üìä Grafana: http://localhost:$(GRAFANA_PORT)"
	@echo "üîç Prometheus: http://localhost:$(PROMETHEUS_PORT)"

prod-monitoring-stop: ## Stop monitoring stack only
	@echo "Stopping monitoring stack..."
	@docker-compose $(MONITORING_FILES) down
	@echo "‚úÖ Monitoring stack stopped"

# =============================================================================
# DATABASE OPERATIONS
# =============================================================================

prod-db-shell: ## Connect to production database
	@docker-compose $(COMPOSE_FILES) exec postgres psql -U $(POSTGRES_USER) -d $(POSTGRES_DB)

prod-db-dump: ## Create database dump
	@echo "Creating database dump..."
	@docker-compose $(COMPOSE_FILES) exec postgres pg_dump -U $(POSTGRES_USER) -d $(POSTGRES_DB) > $(BACKUP_DIR)/db_dump_$$(date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Database dump created"

prod-db-stats: ## Show database statistics
	@docker-compose $(COMPOSE_FILES) exec postgres psql -U $(POSTGRES_USER) -d $(POSTGRES_DB) -c "\
		SELECT schemaname,tablename,n_live_tup,n_dead_tup,last_vacuum,last_autovacuum \
		FROM pg_stat_user_tables ORDER BY n_live_tup DESC;"

# =============================================================================
# SCALING
# =============================================================================

prod-scale-app: ## Scale application containers
	@test -n "$(REPLICAS)" || (echo "‚ùå REPLICAS not specified. Use: make prod-scale-app REPLICAS=3" && exit 1)
	@echo "Scaling application to $(REPLICAS) replicas..."
	@docker-compose $(COMPOSE_FILES) scale mcp-memory-server=$(REPLICAS)
	@echo "‚úÖ Application scaled to $(REPLICAS) replicas"

# =============================================================================
# UTILITIES
# =============================================================================

prod-shell: ## Shell into application container
	@docker-compose $(COMPOSE_FILES) exec mcp-memory-server /bin/bash

prod-config-validate: ## Validate configuration files
	@echo "Validating configuration files..."
	@docker-compose $(COMPOSE_FILES) config --quiet && echo "‚úÖ Docker Compose configuration valid"
	@nginx -t -c $(PWD)/configs/production/nginx.conf && echo "‚úÖ Nginx configuration valid" || echo "‚ö†Ô∏è  Nginx configuration invalid"

prod-network-test: ## Test network connectivity
	@echo "Testing network connectivity..."
	@docker-compose $(COMPOSE_FILES) exec mcp-memory-server nc -zv postgres 5432
	@docker-compose $(COMPOSE_FILES) exec mcp-memory-server nc -zv qdrant 6333
	@docker-compose $(COMPOSE_FILES) exec mcp-memory-server nc -zv redis 6379

# =============================================================================
# EMERGENCY PROCEDURES
# =============================================================================

prod-emergency-stop: ## Emergency stop all services
	@echo "üö® EMERGENCY STOP - Stopping all services immediately"
	@docker kill $$(docker ps -q --filter "label=com.docker.compose.project=$(PROJECT_NAME)") 2>/dev/null || true
	@echo "‚úÖ Emergency stop completed"

prod-emergency-restart: ## Emergency restart all services
	@echo "üö® EMERGENCY RESTART - Restarting all services"
	@make prod-emergency-stop
	@sleep 10
	@make prod-start
	@echo "‚úÖ Emergency restart completed"

# =============================================================================
# INFORMATION
# =============================================================================

prod-info: ## Show production environment information
	@echo "Production Environment Information"
	@echo "=================================="
	@echo "Project: $(PROJECT_NAME)"
	@echo "Data Directory: $(DATA_DIR)"
	@echo "Log Directory: $(LOG_DIR)"
	@echo "Backup Directory: $(BACKUP_DIR)"
	@echo ""
	@echo "Service URLs:"
	@echo "  Application: http://localhost:$(MCP_HOST_PORT)"
	@echo "  Nginx: http://localhost:$(NGINX_HTTP_PORT)"
	@echo "  Grafana: http://localhost:$(GRAFANA_PORT)"
	@echo "  Prometheus: http://localhost:$(PROMETHEUS_PORT)"
	@echo ""
	@echo "Container Status:"
	@docker ps --filter "label=com.docker.compose.project=$(PROJECT_NAME)" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# =============================================================================
# DEVELOPMENT HELPERS (for production debugging)
# =============================================================================

prod-debug: ## Enable debug mode (temporary)
	@echo "‚ö†Ô∏è  Enabling debug mode temporarily..."
	@docker-compose $(COMPOSE_FILES) exec mcp-memory-server /app/scripts/debug.sh || echo "Debug script not available"

prod-metrics: ## Show current metrics
	@echo "Current System Metrics:"
	@echo "======================"
	@scripts/health_check.sh performance -f text