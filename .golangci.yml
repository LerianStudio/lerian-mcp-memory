version: "2"

run:
  timeout: 10m
  tests: true
  go: '1.23'

linters:
  enable:
    # BLOCKING: Core quality checks (must pass for CI)
    - errcheck        # Check for unchecked errors  
    - govet          # Vet examines Go source code
    - staticcheck    # Advanced Go linter
    - gosec          # Security analyzer
    - contextcheck   # Check the function whether use a non-inherited context
    - errorlint      # Find code that will cause problems with the error wrapping scheme
    
    # NON-BLOCKING: Code quality improvements (warnings only)
    - ineffassign    # Detects ineffectual assignments
    - unused         # Checks for unused constants, variables, functions and types
    - bodyclose      # Check HTTP response bodies are closed
    - copyloopvar    # Checks for pointers to enclosing loop variables
    - goconst        # Finds repeated strings that could be replaced by a constant
    - gocyclo        # Computes and checks the cyclomatic complexity of functions
    - nestif         # Reports deeply nested if statements
    - dupl           # Tool for code clone detection
    - durationcheck  # Check for two durations multiplied together
    - misspell       # Finds commonly misspelled English words in comments
    - prealloc       # Find slice declarations that could potentially be preallocated
    - unconvert      # Remove unnecessary type conversions
    - unparam        # Reports unused function parameters
    - whitespace     # Tool for detection of leading and trailing whitespace
    - gocritic       # Comprehensive Go linter
    - nilnil         # Checks that there is no simultaneous return of nil error and nil value
    - nolintlint     # Reports ill-formed or insufficient nolint directives

linters-settings:
  gocyclo:
    min-complexity: 15
  nestif:
    min-complexity: 5
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
    disabled-checks:
      - commentedOutCode
      - ifElseChain
  gosec:
    severity: "high"  # Only fail CI on high severity issues
    confidence: "high" # Only fail CI on high confidence issues
    excludes:
      - G104  # Audit errors not checked (we'll address these gradually)
      - G204  # Subprocess launched with variable
      - G304  # File path provided as taint input
  staticcheck:
    checks: ["all"]
  errcheck:
    check-type-assertions: false
    check-blank: false
    exclude-functions:
      # Allow ignoring errors for common write operations
      - (*os.File).Write
      - (*os.File).WriteString
      - (*bufio.Writer).Write
      - (*bufio.Writer).WriteString
      - (io.Writer).Write

issues:
  max-issues-per-linter: 50  # Limit to prevent overwhelming output
  max-same-issues: 10
  exclude-use-default: true
  exclude-rules:
    # Exclude some issues from being considered failures
    - linters:
        - gocritic
        - unparam 
        - unused
        - prealloc
        - goconst
        - dupl
      severity: warning
  severity-rules:
    - linters:
        - errcheck
        - govet
        - staticcheck
        - gosec
        - contextcheck
        - errorlint
      severity: error  # These will fail CI
    - linters:
        - gocritic
        - unparam
        - unused
        - prealloc
        - goconst
        - dupl
        - ineffassign
        - gocyclo
        - nestif
      severity: warning  # These will show as warnings but not fail CI