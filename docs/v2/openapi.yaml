openapi: 3.0.3
info:
  title: MCP Memory Server v2 API
  description: |
    Intelligent memory capabilities for AI assistants through the Model Context Protocol (MCP).
    
    The MCP Memory Server v2 provides a clean, intuitive API organized into 4 logical tools:
    - **memory_store**: All data persistence operations
    - **memory_retrieve**: All data retrieval operations  
    - **memory_analyze**: All analysis and intelligence operations
    - **memory_system**: All system administration operations
    
    ## Key Features
    - Clean 4-tool architecture with logical boundaries
    - Semantic search with vector embeddings
    - Intelligent relationship detection
    - Cross-domain coordination
    - Project-based data isolation
    - Session-aware access control
    
    ## Authentication
    Most operations require a valid project_id for data isolation. 
    Optional session_id provides expanded access to session-specific data.
    
  version: 2.0.0
  contact:
    name: Lerian Studio
    url: https://github.com/lerian/mcp-memory-server
    email: support@lerian.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:9080
    description: Local development server
  - url: https://memory.lerian.dev
    description: Production server

tags:
  - name: memory_store
    description: Data persistence operations (store, update, delete)
  - name: memory_retrieve  
    description: Data retrieval operations (search, get, find)
  - name: memory_analyze
    description: Analysis and intelligence operations
  - name: memory_system
    description: System administration operations

paths:
  /mcp:
    post:
      summary: JSON-RPC API Endpoint
      description: |
        All MCP Memory Server operations use JSON-RPC 2.0 over HTTP POST.
        
        The `tools/call` method is used for all operations, with the specific tool
        and operation specified in the parameters.
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONRPCRequest'
            examples:
              store_content:
                summary: Store Content
                value:
                  jsonrpc: "2.0"
                  method: "tools/call"
                  params:
                    name: "memory_store"
                    arguments:
                      operation: "store_content"
                      project_id: "my-project"
                      session_id: "session-123"
                      content: "Important information to remember"
                      tags: ["important", "memory"]
                      options:
                        generate_embeddings: true
                  id: 1
              search_content:
                summary: Search Content
                value:
                  jsonrpc: "2.0"
                  method: "tools/call"
                  params:
                    name: "memory_retrieve"
                    arguments:
                      operation: "search_content"
                      project_id: "my-project"
                      query: "important information"
                      options:
                        limit: 5
                        query_type: "semantic"
                  id: 2
              analyze_quality:
                summary: Analyze Quality
                value:
                  jsonrpc: "2.0"
                  method: "tools/call"
                  params:
                    name: "memory_analyze"
                    arguments:
                      operation: "analyze_quality"
                      project_id: "my-project"
                      content_id: "content_abc123"
                      options:
                        include_suggestions: true
                  id: 3
              system_health:
                summary: System Health
                value:
                  jsonrpc: "2.0"
                  method: "tools/call"
                  params:
                    name: "memory_system"
                    arguments:
                      operation: "check_system_health"
                      detailed: true
                  id: 4
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/JSONRPCSuccessResponse'
                  - $ref: '#/components/schemas/JSONRPCErrorResponse'
              examples:
                success_response:
                  summary: Successful Response
                  value:
                    jsonrpc: "2.0"
                    result:
                      success: true
                      message: "Content stored successfully"
                      timestamp: "2024-12-06T15:30:45Z"
                      duration: "15ms"
                      content_id: "content_abc123"
                    id: 1
                error_response:
                  summary: Error Response
                  value:
                    jsonrpc: "2.0"
                    error:
                      code: 422
                      message: "Parameter validation failed"
                      data:
                        error_type: "validation_error"
                        details:
                          field: "project_id"
                          violation: "required"
                          provided: null
                        suggestions:
                          - "Provide a valid project_id parameter"
                        documentation_url: "https://docs.lerian.dev/mcp-memory/api"
                    id: 1

  /health:
    get:
      summary: Health Check
      description: Simple health check endpoint for monitoring
      tags:
        - memory_system
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  version:
                    type: string
                    example: "v2.0.0"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-12-06T15:30:45Z"

  /ws:
    get:
      summary: WebSocket Connection
      description: |
        WebSocket endpoint for real-time bidirectional communication.
        
        Upgrade HTTP connection to WebSocket for persistent connection
        and real-time operations.
        
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Bad Request - Invalid WebSocket upgrade

  /sse:
    get:
      summary: Server-Sent Events
      description: |
        Server-Sent Events endpoint for real-time server-to-client communication.
        
        Use for streaming responses and real-time updates.
        
      responses:
        '200':
          description: SSE stream established
          content:
            text/event-stream:
              schema:
                type: string

components:
  schemas:
    JSONRPCRequest:
      type: object
      required:
        - jsonrpc
        - method
        - params
        - id
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"]
          description: JSON-RPC version
        method:
          type: string
          enum: ["tools/call"]
          description: RPC method name
        params:
          $ref: '#/components/schemas/ToolCallParams'
        id:
          oneOf:
            - type: string
            - type: number
          description: Request identifier

    ToolCallParams:
      type: object
      required:
        - name
        - arguments
      properties:
        name:
          type: string
          enum:
            - "memory_store"
            - "memory_retrieve"
            - "memory_analyze"
            - "memory_system"
          description: Tool name
        arguments:
          oneOf:
            - $ref: '#/components/schemas/MemoryStoreArguments'
            - $ref: '#/components/schemas/MemoryRetrieveArguments'
            - $ref: '#/components/schemas/MemoryAnalyzeArguments'
            - $ref: '#/components/schemas/MemorySystemArguments'

    JSONRPCSuccessResponse:
      type: object
      required:
        - jsonrpc
        - result
        - id
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"]
        result:
          $ref: '#/components/schemas/OperationResult'
        id:
          oneOf:
            - type: string
            - type: number

    JSONRPCErrorResponse:
      type: object
      required:
        - jsonrpc
        - error
        - id
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"]
        error:
          $ref: '#/components/schemas/JSONRPCError'
        id:
          oneOf:
            - type: string
            - type: number

    JSONRPCError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Human-readable error message
        data:
          type: object
          properties:
            error_type:
              type: string
              description: Categorized error type
            details:
              type: object
              description: Error details
            suggestions:
              type: array
              items:
                type: string
              description: Recovery suggestions
            documentation_url:
              type: string
              format: uri
              description: Help documentation URL

    StandardParams:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          description: Specific operation to perform
        project_id:
          type: string
          description: Project identifier for data isolation
          example: "my-project"
        session_id:
          type: string
          description: Session identifier for expanded access
          example: "session-123"
        user_id:
          type: string
          description: User identifier for audit logging
          example: "user-456"
        request_id:
          type: string
          description: Request identifier for tracking
          example: "req-789"

    MemoryStoreArguments:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          properties:
            operation:
              type: string
              enum:
                - "store_content"
                - "update_content"
                - "delete_content"
                - "store_decision"
                - "create_relationship"
          discriminator:
            propertyName: operation
            mapping:
              store_content: '#/components/schemas/StoreContentArgs'
              update_content: '#/components/schemas/UpdateContentArgs'
              delete_content: '#/components/schemas/DeleteContentArgs'
              store_decision: '#/components/schemas/StoreDecisionArgs'
              create_relationship: '#/components/schemas/CreateRelationshipArgs'

    StoreContentArgs:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          required:
            - content
          properties:
            content:
              type: string
              description: Content text to store
              example: "Important information to remember"
            summary:
              type: string
              description: Optional content summary
              example: "Key project information"
            content_type:
              type: string
              description: MIME type
              example: "text/markdown"
              default: "text/plain"
            tags:
              type: array
              items:
                type: string
              description: Organizational tags
              example: ["important", "project", "memory"]
            metadata:
              type: object
              additionalProperties: true
              description: Custom metadata
            options:
              type: object
              properties:
                generate_embeddings:
                  type: boolean
                  description: Auto-generate embeddings
                  default: true
                detect_relationships:
                  type: boolean
                  description: Auto-detect relationships
                  default: false
                extract_metadata:
                  type: boolean
                  description: Auto-extract metadata
                  default: false

    MemoryRetrieveArguments:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          properties:
            operation:
              type: string
              enum:
                - "search_content"
                - "get_content"
                - "find_similar_content"
                - "get_content_history"

    MemoryAnalyzeArguments:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          properties:
            operation:
              type: string
              enum:
                - "detect_patterns"
                - "analyze_quality"
                - "find_content_relationships"
                - "detect_conflicts"
                - "generate_insights"

    MemorySystemArguments:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          properties:
            operation:
              type: string
              enum:
                - "check_system_health"
                - "export_project_data"
                - "import_project_data"
                - "validate_data_integrity"
                - "generate_citation"

    UpdateContentArgs:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          required:
            - content_id
            - updates
          properties:
            content_id:
              type: string
              description: Content ID to update
              example: "content_abc123"
            updates:
              type: object
              properties:
                content:
                  type: string
                  description: New content text
                summary:
                  type: string
                  description: New summary
                tags:
                  type: array
                  items:
                    type: string
                  description: New tags (replaces existing)
                metadata:
                  type: object
                  additionalProperties: true
                  description: Metadata updates (merged)
            options:
              type: object
              properties:
                regenerate_embeddings:
                  type: boolean
                  description: Regenerate embeddings
                  default: true
                update_relationships:
                  type: boolean
                  description: Update relationships
                  default: false
                preserve_previous:
                  type: boolean
                  description: Keep previous version
                  default: true

    DeleteContentArgs:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          required:
            - content_id
          properties:
            content_id:
              type: string
              description: Content ID to delete
              example: "content_abc123"
            options:
              type: object
              properties:
                hard:
                  type: boolean
                  description: Permanent deletion
                  default: false
                delete_relationships:
                  type: boolean
                  description: Also delete relationships
                  default: false
                preserve_references:
                  type: boolean
                  description: Keep references but mark deleted
                  default: true

    StoreDecisionArgs:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          required:
            - title
            - context
            - decision
            - rationale
          properties:
            title:
              type: string
              description: Decision title
              example: "Architecture: Choose Vector Database"
            context:
              type: string
              description: Decision context/background
              example: "We need a vector database for semantic search"
            decision:
              type: string
              description: The decision made
              example: "Use Qdrant as the vector database"
            rationale:
              type: string
              description: Why this decision was made
              example: "Qdrant provides excellent performance and clustering"
            alternatives:
              type: array
              items:
                type: string
              description: Alternatives considered
              example: ["Pinecone", "Weaviate", "Chroma"]
            impact:
              type: string
              description: Expected impact
              example: "Improved search performance and scalability"
            stakeholders:
              type: array
              items:
                type: string
              description: People affected
              example: ["engineering-team", "product-team"]
            tags:
              type: array
              items:
                type: string
              description: Decision tags
              example: ["architecture", "database", "vectors"]
            metadata:
              type: object
              additionalProperties: true
              description: Additional metadata

    CreateRelationshipArgs:
      allOf:
        - $ref: '#/components/schemas/StandardParams'
        - type: object
          required:
            - source_id
            - target_id
            - type
          properties:
            source_id:
              type: string
              description: Source content ID
              example: "content_abc123"
            target_id:
              type: string
              description: Target content ID
              example: "content_def456"
            type:
              type: string
              enum:
                - "similar_to"
                - "related_to"
                - "references"
                - "cites"
                - "contains"
                - "part_of"
                - "follows"
                - "precedes"
                - "causes"
                - "resolves"
                - "implements"
                - "describes"
              description: Relationship type
            strength:
              type: number
              minimum: 0
              maximum: 1
              description: Relationship strength
              example: 0.85
            context:
              type: string
              description: Relationship context
              example: "Both documents discuss vector databases"
            metadata:
              type: object
              additionalProperties: true
              description: Relationship metadata

    OperationResult:
      type: object
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          description: Operation success status
        message:
          type: string
          description: Human-readable message
          example: "Content stored successfully"
        timestamp:
          type: string
          format: date-time
          description: Operation timestamp
          example: "2024-12-06T15:30:45Z"
        duration:
          type: string
          description: Operation duration
          example: "15ms"
        request_id:
          type: string
          description: Request identifier
          example: "req-789"

    Content:
      type: object
      required:
        - id
        - project_id
        - content
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Unique content identifier
          example: "content_abc123"
        project_id:
          type: string
          description: Project identifier
          example: "my-project"
        session_id:
          type: string
          description: Session identifier
          example: "session-123"
        content:
          type: string
          description: Content text
          example: "Important information to remember"
        summary:
          type: string
          description: Content summary
          example: "Key project information"
        content_type:
          type: string
          description: MIME type
          example: "text/markdown"
        tags:
          type: array
          items:
            type: string
          description: Content tags
          example: ["important", "project"]
        categories:
          type: array
          items:
            type: string
          description: Content categories
          example: ["documentation", "memory"]
        metadata:
          type: object
          additionalProperties: true
          description: Content metadata
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-12-06T15:30:45Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-12-06T15:35:12Z"
        accessed_at:
          type: string
          format: date-time
          description: Last access timestamp
          example: "2024-12-06T15:40:22Z"
        version:
          type: integer
          description: Content version number
          example: 1
        parent_id:
          type: string
          description: Parent content ID (for versions)
          example: "content_parent123"

    SearchResult:
      type: object
      required:
        - content
        - relevance
      properties:
        content:
          $ref: '#/components/schemas/Content'
        relevance:
          type: number
          minimum: 0
          maximum: 1
          description: Relevance score
          example: 0.92
        highlights:
          type: array
          items:
            type: string
          description: Search term highlights
          example: ["important **information**", "**remember** this"]
        context:
          type: string
          description: Surrounding context
          example: "This document contains important information..."
        explanation:
          type: string
          description: Why this result matched
          example: "Matched on semantic similarity to 'important information'"

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
        - version
      properties:
        status:
          type: string
          enum: ["healthy", "degraded", "unhealthy"]
          description: Overall system status
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
        version:
          type: string
          description: Server version
          example: "v2.0.0"
        uptime:
          type: string
          description: Server uptime
          example: "72h30m15s"
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
          description: Component health status
        performance:
          type: object
          properties:
            response_time:
              type: string
              description: Average response time
              example: "12ms"
            throughput:
              type: number
              description: Requests per second
              example: 45.2
            error_rate:
              type: number
              description: Error rate percentage
              example: 0.1
        resources:
          type: object
          properties:
            memory_usage:
              type: string
              description: Memory usage
              example: "512MB / 2GB"
            storage_usage:
              type: string
              description: Storage usage
              example: "1.2GB / 10GB"
            connection_count:
              type: integer
              description: Active connections
              example: 15

    ComponentHealth:
      type: object
      required:
        - status
        - last_check
      properties:
        status:
          type: string
          enum: ["healthy", "degraded", "unhealthy"]
          description: Component status
        message:
          type: string
          description: Status message
          example: "Database connection established"
        last_check:
          type: string
          format: date-time
          description: Last health check
        metrics:
          type: object
          additionalProperties: true
          description: Component-specific metrics

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Optional API key authentication for programmatic access

  responses:
    ValidationError:
      description: Parameter validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONRPCErrorResponse'
          example:
            jsonrpc: "2.0"
            error:
              code: 422
              message: "Parameter validation failed"
              data:
                error_type: "validation_error"
                details:
                  field: "project_id"
                  violation: "required"
                  provided: null
                suggestions:
                  - "Provide a valid project_id parameter"
            id: 1

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONRPCErrorResponse'
          example:
            jsonrpc: "2.0"
            error:
              code: 404
              message: "Content not found"
              data:
                error_type: "resource_not_found"
                details:
                  resource_type: "content"
                  resource_id: "content_xyz789"
                  project_id: "my-project"
                suggestions:
                  - "Verify the content ID is correct"
                  - "Check if the content was deleted"
            id: 1

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONRPCErrorResponse'
          example:
            jsonrpc: "2.0"
            error:
              code: 500
              message: "Internal server error"
              data:
                error_type: "internal_error"
                details:
                  error_id: "err_123456"
                suggestions:
                  - "Try the request again"
                  - "Contact support if the issue persists"
            id: 1

security:
  - BearerAuth: []
  - {}

externalDocs:
  description: Complete documentation and guides
  url: https://docs.lerian.dev/mcp-memory