# Monitoring Stack Docker Compose configuration
# Prometheus, Grafana, AlertManager, and log aggregation
version: '3.8'

services:
  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
      
    environment:
      - PROMETHEUS_RETENTION_TIME=${PROMETHEUS_RETENTION_TIME:-30d}
      - PROMETHEUS_RETENTION_SIZE=${PROMETHEUS_RETENTION_SIZE:-10GB}
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-30d}'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-10GB}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=${PROMETHEUS_LOG_LEVEL:-info}'
      
    volumes:
      - ./configs/production/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
    networks:
      - monitoring-network
      
    depends_on:
      - node-exporter
      - cadvisor
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
          
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        
    security_opt:
      - no-new-privileges:true

  # Grafana dashboard
  grafana:
    image: grafana/grafana:10.2.2
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
      
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_LOG_LEVEL=${GRAFANA_LOG_LEVEL:-info}
      - GF_METRICS_ENABLED=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/production/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/production/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./configs/production/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      
    networks:
      - monitoring-network
      
    depends_on:
      - prometheus
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
          
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # AlertManager for alerts
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: mcp-alertmanager
    restart: unless-stopped
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
      
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--log.level=${ALERTMANAGER_LOG_LEVEL:-info}'
      
    volumes:
      - ./configs/production/alertmanager:/etc/alertmanager:ro
      - alertmanager-data:/alertmanager
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: mcp-node-exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
      
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.textfile.directory=/var/lib/node-exporter/textfile_collector'
      
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
      - node-exporter-data:/var/lib/node-exporter
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true
    pid: host

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: mcp-cadvisor
    restart: unless-stopped
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
      
    command:
      - '--logtostderr'
      - '--v=1'
      - '--docker_only=true'
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl'
      
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true
    privileged: true
    devices:
      - /dev/kmsg

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: mcp-postgres-exporter
    restart: unless-stopped
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
      
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-mcp_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mcp_memory}?sslmode=require
      - PG_EXPORTER_EXCLUDE_DATABASES=template0,template1
      - PG_EXPORTER_INCLUDE_DATABASES=${POSTGRES_DB:-mcp_memory}
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
      
    volumes:
      - ./configs/production/postgres-exporter:/etc/postgres_exporter:ro
      
    networks:
      - monitoring-network
      - mcp-network
      
    depends_on:
      - postgres
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: mcp-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
      
    command:
      - '-config.file=/etc/loki/loki.yml'
      - '-log.level=${LOKI_LOG_LEVEL:-info}'
      
    volumes:
      - ./configs/production/loki:/etc/loki:ro
      - loki-data:/tmp/loki
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
          
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        
    security_opt:
      - no-new-privileges:true

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: mcp-promtail
    restart: unless-stopped
    
    command:
      - '-config.file=/etc/promtail/promtail.yml'
      - '-log.level=${PROMTAIL_LOG_LEVEL:-info}'
      
    volumes:
      - ./configs/production/promtail:/etc/promtail:ro
      - ./logs:/var/log/mcp:ro
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
    networks:
      - monitoring-network
      
    depends_on:
      - loki
      
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: mcp-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
      
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=10000
      - LOG_LEVEL=${JAEGER_LOG_LEVEL:-info}
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
          
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        
    security_opt:
      - no-new-privileges:true

networks:
  monitoring-network:
    external: true
    name: lerian-mcp-memory_monitoring-network
    
  mcp-network:
    external: true
    name: lerian-mcp-memory_mcp-network

volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
      
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana
      
  alertmanager-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/alertmanager
      
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/loki
      
  node-exporter-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m