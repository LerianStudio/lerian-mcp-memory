name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]

jobs:
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Clean Go caches
        run: |
          go clean -cache -modcache -testcache || true
          
      - name: Download dependencies
        run: go mod download

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.1
          args: --timeout=5m --config=.golangci.yml
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

      - name: Build server binary
        run: go build -o server ./cmd/server

      - name: Integration tests
        run: |
          # Basic integration test - ensure server starts
          timeout 5s ./server -mode=stdio || true
          echo "Integration test completed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run gosec security scanner
        continue-on-error: true
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./... || echo "Security scan completed with warnings"

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test-and-lint, security]
    if: github.event_name == 'release'
    
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-registry:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install build dependencies for CGO
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build binaries for multiple platforms
        run: |
          mkdir -p bin
          # Build for Linux (CGO enabled for native platform)
          go build -ldflags="-s -w" -o bin/mcp-memory-linux-amd64 ./cmd/server
          
          # Cross-compile for other platforms (CGO disabled for cross-compilation)
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o bin/mcp-memory-linux-arm64 ./cmd/server
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o bin/mcp-memory-darwin-amd64 ./cmd/server
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o bin/mcp-memory-darwin-arm64 ./cmd/server
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o bin/mcp-memory-windows-amd64.exe ./cmd/server

      - name: Create version info
        run: |
          mkdir -p packages
          echo "commit: ${{ github.sha }}" > packages/VERSION
          echo "ref: ${{ github.ref }}" >> packages/VERSION
          echo "build_date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> packages/VERSION

      - name: Package binaries
        run: |
          cd bin
          for binary in *; do
            if [[ "$binary" == *.exe ]]; then
              zip -9 "../packages/${binary%.exe}.zip" "$binary"
            else
              tar -czf "../packages/${binary}.tar.gz" "$binary"
            fi
          done

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: mcp-memory-binaries-${{ github.sha }}
          path: packages/
          retention-days: 30