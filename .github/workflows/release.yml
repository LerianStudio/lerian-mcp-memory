name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: dist/

  docker:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ github.repository }}
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          COMMIT_HASH=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [goreleaser, docker]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Generate changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Extract the section for this version
          awk -v ver="$VERSION" '
            /^## \[/ {
              if (found) exit;
              if (index($0, ver)) found=1;
            }
            found && /^## \[/ && !index($0, ver) { exit }
            found { print }
          ' CHANGELOG.md > release_notes.md
        else
          # Generate from git log
          echo "## $VERSION" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 $VERSION^)..$VERSION >> release_notes.md
        fi
    
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        bodyFile: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
        token: ${{ secrets.GITHUB_TOKEN }}

  publish-go-module:
    name: Publish Go Module
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Publish to pkg.go.dev
      run: |
        # Trigger pkg.go.dev to index the new version
        curl -s "https://pkg.go.dev/github.com/${{ github.repository }}@${{ github.ref_name }}" > /dev/null || true
        
        # Verify module can be fetched
        go list -m github.com/${{ github.repository }}@${{ github.ref_name }}