# Frontend Service Only - MCP Memory WebUI
# Use this for frontend development/testing
# Requires backend to be running separately (docker-compose.backend.yml)

services:
  # MCP Memory WebUI (Frontend Only)
  lerian-mcp-memory-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:9080}
        - NEXT_PUBLIC_GRAPHQL_URL=${NEXT_PUBLIC_GRAPHQL_URL:-http://localhost:9080/graphql}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:9080/ws}
    container_name: lerian-mcp-memory-frontend
    restart: unless-stopped
    ports:
      - "${WEBUI_PORT:-2001}:3000"       # WebUI port
    environment:
      # Frontend configuration - Point to backend services
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:9080}
      - NEXT_PUBLIC_GRAPHQL_URL=${NEXT_PUBLIC_GRAPHQL_URL:-http://localhost:9080/graphql}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:9080/ws}
      - NODE_ENV=production
      - LOCAL_DEVELOPMENT=true  # Enable relaxed CSP for local testing
      
      # Optional: Enable mock fallback if backend is not available
      - NEXT_PUBLIC_ENABLE_MOCK_FALLBACK=${ENABLE_MOCK_FALLBACK:-false}
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - lerian_mcp_network

# Networks - Use the same network as backend for communication
networks:
  lerian_mcp_network:
    external: true
    name: lerian-mcp-memory_lerian_mcp_network