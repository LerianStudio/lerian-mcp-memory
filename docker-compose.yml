# Lerian MCP Memory Server - Unified Docker Compose
# Simplified configuration with multiple profiles for different environments
#
# Usage:
#   Development:  docker-compose --profile dev up
#   Production:   docker-compose --profile prod up
#   Monitoring:   docker-compose --profile monitoring up
#
# Copy .env.example to .env and configure as needed

services:
  # Qdrant Vector Database - Core service for all profiles
  qdrant:
    image: qdrant/qdrant:latest
    container_name: lerian-mcp-memory-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_HOST_PORT:-6333}:6333"  # HTTP API
      - "${QDRANT_GRPC_PORT:-6334}:6334"  # gRPC API
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__CLUSTER__ENABLED=false
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - lerian_network
    profiles: ["dev", "prod", "monitoring"]

  # Lerian MCP Memory Server - Production version
  lerian-mcp-memory:
    image: ghcr.io/lerianstudio/lerian-mcp-memory:latest
    container_name: lerian-mcp-memory-server
    restart: unless-stopped
    depends_on:
      - qdrant
    ports:
      - "${MCP_HOST_PORT:-9080}:9080"    # MCP API port
      - "${MCP_HEALTH_PORT:-8081}:8081"  # Health check port
      - "${MCP_METRICS_PORT:-9082}:8082" # Metrics port (optional)
    env_file:
      - .env
    environment:
      # Container networking overrides
      - MCP_MEMORY_QDRANT_HOST=qdrant
      - MCP_MEMORY_DATA_DIR=/app/data
      - MCP_MEMORY_CONFIG_DIR=/app/config
      - MCP_MEMORY_HTTP_PORT=9080
      - MCP_MEMORY_HEALTH_PORT=8081
      - MCP_MEMORY_METRICS_PORT=8082
      - MCP_MEMORY_LOG_LEVEL=${MCP_MEMORY_LOG_LEVEL:-info}
    volumes:
      - mcp_data:/app/data
      - mcp_logs:/app/logs
      - mcp_backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - lerian_network
    profiles: ["prod"]

  # Lerian MCP Memory Server - Development version with hot reload
  lerian-mcp-memory-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
      args:
        - VERSION=${VERSION:-dev}
        - BUILD_TIME=${BUILD_TIME:-dev}
        - COMMIT_HASH=${COMMIT_HASH:-dev}
    image: lerian-mcp-memory:dev
    container_name: lerian-mcp-memory-server
    restart: unless-stopped
    depends_on:
      - qdrant
    ports:
      - "${MCP_HOST_PORT:-9080}:9080"
      - "${MCP_HEALTH_PORT:-8081}:8081"
      - "${MCP_METRICS_PORT:-8082}:8082"
    env_file:
      - .env
    environment:
      # Development-specific overrides
      - MCP_MEMORY_QDRANT_HOST=qdrant
      - MCP_MEMORY_DATA_DIR=/app/data
      - MCP_MEMORY_CONFIG_DIR=/app/config
      - MCP_MEMORY_LOG_LEVEL=debug
      - MCP_MEMORY_DEV_MODE=true
      - CGO_ENABLED=0
      - GOOS=linux
    volumes:
      # Mount source code for hot reload
      - ./cmd:/app/cmd:ro
      - ./internal:/app/internal:ro
      - ./pkg:/app/pkg:ro
      - ./configs:/app/configs:ro
      - ./go.mod:/app/go.mod:ro
      - ./go.sum:/app/go.sum:ro
      # Persistent data volumes
      - mcp_data:/app/data
      - mcp_logs:/app/logs
      - mcp_backups:/app/backups
    command: ["air", "-c", ".air.toml"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - lerian_network
    profiles: ["dev"]

  # PostgreSQL Database - For advanced monitoring
  postgres:
    image: postgres:16-alpine
    container_name: lerian-mcp-memory-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-lerian_mcp_memory}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - lerian_network
    profiles: ["monitoring"]

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: lerian-mcp-memory-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lerian_network
    profiles: ["monitoring"]

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lerian-mcp-memory-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - lerian_network
    profiles: ["monitoring"]

  # Alertmanager - Alert management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: lerian-mcp-memory-alertmanager
    restart: unless-stopped
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./configs/monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - lerian_network
    profiles: ["monitoring"]

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: lerian-mcp-memory-node-exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - lerian_network
    profiles: ["monitoring"]

# Networks
networks:
  lerian_network:
    driver: bridge

# Volumes - CRITICAL: These contain all your memory data. NEVER DELETE!
volumes:
  # CRITICAL: Qdrant vector database - Contains all embeddings and search indices
  qdrant_data:
    driver: local
    name: mcp_memory_qdrant_vector_db_NEVER_DELETE

  # CRITICAL: MCP server data - Contains SQLite database and app data
  mcp_data:
    driver: local
    name: mcp_memory_app_data_NEVER_DELETE

  # Application logs - Safe to recreate but useful for debugging
  mcp_logs:
    driver: local
    name: mcp_memory_logs

  # Backup storage - Contains automated backups of your data
  mcp_backups:
    driver: local
    name: mcp_memory_backups

  # Monitoring data (only for monitoring profile)
  postgres_data:
    driver: local
    name: mcp_memory_postgres_data

  prometheus_data:
    driver: local
    name: mcp_memory_prometheus_data

  grafana_data:
    driver: local
    name: mcp_memory_grafana_data

  alertmanager_data:
    driver: local
    name: mcp_memory_alertmanager_data
