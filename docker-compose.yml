# Claude Vector Memory MCP Server

services:
  # Chroma Vector Database - Required for embeddings and vector search
  chroma:
    image: chromadb/chroma:latest
    container_name: mcp-chroma
    restart: unless-stopped
    command: ["run", "--path", "/chroma/chroma", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "${CHROMA_HOST_PORT:-8000}:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=${CHROMA_HTTP_PORT:-8000}
      - PERSIST_DIRECTORY=${CHROMA_PERSIST_DIR:-/chroma/chroma}
      - CHROMA_PERSIST_DIRECTORY=${CHROMA_PERSIST_DIR:-/chroma/chroma}
      - CHROMA_DB_DIR=${CHROMA_PERSIST_DIR:-/chroma/chroma}
      - IS_PERSISTENT=TRUE
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - mcp_network

  # Main MCP Memory Server
  mcp-memory-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-memory-server
    restart: unless-stopped
    depends_on:
      - chroma
    ports:
      - "${MCP_HOST_PORT:-9080}:9080" # Main MCP API port
      - "${MCP_HEALTH_PORT:-9081}:8081" # Health check port
      - "${MCP_METRICS_PORT:-9082}:8082" # Metrics port (optional)
    environment:
      - MCP_MEMORY_DATA_DIR=/app/data
      - MCP_MEMORY_CONFIG_DIR=/app/config
      - MCP_MEMORY_LOG_LEVEL=info
      - MCP_MEMORY_HTTP_PORT=8080
      - MCP_MEMORY_HEALTH_PORT=8081
      - MCP_MEMORY_METRICS_PORT=8082
      # Chroma vector database configuration
      - MCP_MEMORY_CHROMA_ENDPOINT=http://chroma:8000
      - MCP_MEMORY_CHROMA_COLLECTION=${CHROMA_COLLECTION:-claude_memory}
      - MCP_MEMORY_VECTOR_DIM=${MCP_MEMORY_EMBEDDING_DIMENSION:-1536}
      # SQLite storage (no PostgreSQL needed)
      - MCP_MEMORY_DB_TYPE=sqlite
      - MCP_MEMORY_DB_PATH=${SQLITE_DB_PATH:-/app/data/memory.db}
      # Security and backup settings
      - MCP_MEMORY_ENCRYPTION_ENABLED=true
      - MCP_MEMORY_BACKUP_ENABLED=true
      - MCP_MEMORY_BACKUP_INTERVAL=${MCP_MEMORY_BACKUP_INTERVAL_HOURS:-24}h
      - MCP_MEMORY_ACCESS_CONTROL_ENABLED=true
      # OpenAI API configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - mcp_data:/app/data
      - mcp_logs:/app/logs
      - mcp_backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9080/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - mcp_network

  # Auto-updater sidecar (optional - use --profile auto-update)
  # NOTE: Watchtower cannot watch locally built images, only registry images
  # For auto-updates, override mcp-memory-server to use registry image:
  # docker-compose -f docker-compose.yml -f docker-compose.prod.yml --profile auto-update up -d
  watchtower:
    image: containrrr/watchtower:latest
    container_name: mcp-auto-updater
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # Check hourly
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_SCOPE=mcp-memory-server  # Only watch MCP container
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_WARN_ON_HEAD_FAILURE=never  # Don't warn about local builds
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mcp_network
    profiles:
      - auto-update  # Optional profile


# Networks
networks:
  mcp_network:
    driver: bridge

# Volumes - CRITICAL: These contain all your memory data. NEVER DELETE!
volumes:
  # CRITICAL: Chroma vector database - Contains all embeddings and search indices
  chroma_data:
    driver: local
    name: mcp_memory_chroma_vector_db_NEVER_DELETE

  # CRITICAL: MCP server data - Contains SQLite database and app data
  mcp_data:
    driver: local
    name: mcp_memory_app_data_NEVER_DELETE

  # Application logs - Safe to recreate but useful for debugging
  mcp_logs:
    driver: local
    name: mcp_memory_logs_NEVER_DELETE

  # Backup storage - Contains automated backups of your data
  mcp_backups:
    driver: local
    name: mcp_memory_backups_NEVER_DELETE
